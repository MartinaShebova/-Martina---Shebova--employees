"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/uploadCSVFile/uploadCSVfile.jsx":
/*!****************************************************!*\
  !*** ./components/uploadCSVFile/uploadCSVfile.jsx ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _services_csvParser_csvParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/csvParser/csvParser */ \"./services/csvParser/csvParser.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! papaparse */ \"./node_modules/papaparse/papaparse.min.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction UploadCSVFile(param) {\n    let { parsedData } = param;\n    const passFileValidations = (file)=>{\n        if (file.type !== \"text/csv\") {\n            console.log(\"Please select a CSV file\");\n            return false;\n        }\n        if (file.size === 0) {\n            console.log(\"File is empty\");\n            return false;\n        }\n        if (file.size > 1024 * 1024) {\n            console.log(\"File size exceeds the limit\");\n            return false;\n        }\n        return true;\n    };\n    const handleFileUpload = (event)=>{\n        const file = event.target.files[0];\n        if (!passFileValidations(file)) {\n            return;\n        }\n        papaparse__WEBPACK_IMPORTED_MODULE_2___default().parse(file, {\n            complete: (result)=>{\n                let csvData = result.data;\n                csvData = csvData.map((record)=>{\n                    if (record.DateTo === \"NULL\") {\n                        let currentDate = new Date();\n                        let day = currentDate.getDate();\n                        if (day < 10) {\n                            day = \"0\".concat(day);\n                        }\n                        let month = currentDate.getMonth() + 1;\n                        if (month < 10) {\n                            month = \"0\".concat(month);\n                        }\n                        const year = currentDate.getFullYear();\n                        record.DateTo = \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n                    } else {\n                        const match = record.DateTo.match(/^(\\d{1,2})[./-](\\d{1,2})[./-](\\d{4})$/);\n                        if (match) {\n                            let [, day, month, year] = match;\n                            if (day < 10 && !day.includes(\"0\")) {\n                                day = \"0\".concat(day);\n                            }\n                            if (month < 10 && !month.includes(\"0\")) {\n                                month = \"0\".concat(month);\n                            }\n                            record.DateTo = \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n                        }\n                    }\n                    const match = record.DateFrom.match(/^(\\d{1,2})[./-](\\d{1,2})[./-](\\d{4})$/);\n                    if (match) {\n                        let [, day, month, year] = match;\n                        if (day < 10 && !day.includes(\"0\")) {\n                            day = \"0\".concat(day);\n                        }\n                        if (month < 10 && !month.includes(\"0\")) {\n                            month = \"0\".concat(month);\n                        }\n                        record.DateFrom = \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n                    }\n                    return record;\n                });\n                let projects = Object.groupBy(csvData, (param)=>{\n                    let { ProjectID } = param;\n                    return ProjectID;\n                });\n                const identifiers = [];\n                let finalResult = {};\n                console.log(\"projects\", projects);\n                Object.keys(projects).forEach((project)=>{\n                    for(let i = 0; i < projects[project].length; i++){\n                        for(let j = i + 1; j < projects[project].length; j++){\n                            const firstEmployee = projects[project][i];\n                            const secondEmployee = projects[project][j];\n                            let pairIndentifier;\n                            // console.log(firstEmployee);\n                            // console.log(secondEmployee);\n                            if (firstEmployee.EmpID !== secondEmployee.EmpID) {\n                                pairIndentifier = buildEmployeePairIdentifier(firstEmployee.EmpID, secondEmployee.EmpID);\n                            }\n                            const overlapDaysCount = calculateOverlapDays(new Date(firstEmployee.DateFrom), new Date(firstEmployee.DateTo), new Date(secondEmployee.DateFrom), new Date(secondEmployee.DateTo));\n                            if (overlapDaysCount && pairIndentifier) {\n                                if (finalResult.hasOwnProperty(pairIndentifier)) {\n                                    finalResult[pairIndentifier] += overlapDaysCount;\n                                } else {\n                                    finalResult[pairIndentifier] = overlapDaysCount;\n                                }\n                            }\n                        // console.log(\"pairIndentifier\", pairIndentifier);\n                        // if (!identifiers.includes(identifier) && firstEmployee.EmpID !== secondEmployee.EmpID) {\n                        //     identifiers.push(identifier);\n                        // }\n                        }\n                    }\n                });\n                console.log(\"result\", finalResult);\n                function buildEmployeePairIdentifier(firstEmployee, secondEmployee) {\n                    return \"\".concat(firstEmployee, \"-\").concat(secondEmployee);\n                }\n                function calculateOverlapDays(firstEmployeeStartDate, firstEmployeeEndDate, secondEmployeeStartDate, secondEmployeeEndDate) {\n                    // Calculate the overlap period\n                    const overlapStartDate = new Date(Math.max(firstEmployeeStartDate, secondEmployeeStartDate));\n                    const overlapEndDate = new Date(Math.min(firstEmployeeEndDate, secondEmployeeEndDate));\n                    // If there's no overlap, return 0\n                    if (overlapStartDate > overlapEndDate) {\n                        return 0;\n                    }\n                    // Calculate the number of days in the overlap period\n                    const millisecondsInDay = 1000 * 60 * 60 * 24;\n                    const overlapDays = Math.floor((overlapEndDate - overlapStartDate) / millisecondsInDay) + 1;\n                    return overlapDays;\n                }\n                console.log(\"identifiers\", identifiers);\n            // const groupedData = {};\n            // csvData.forEach(entry => {\n            //     const key = entry.EmpID + '-' + entry.ProjectID;\n            //     if (!groupedData[key]) {\n            //         groupedData[key] = [];\n            //     }\n            //     groupedData[key].push(entry);\n            // });\n            // console.log(\"groupedData\", groupedData);\n            // {\n            //     {\n            //         1-2: 2,\n            //     }\n            // }\n            // for (const key in groupedData) {\n            //     if (groupedData[key].length > 1) {\n            //         const employees = groupedData[key].map(entry => entry.EmpID);\n            //         console.log(\"employees\", employees);\n            //         let daysWorked = 0;\n            //         groupedData[key].forEach(entry => {\n            //             const fromDate = new Date(entry.DateFrom);\n            //             const toDate = new Date(entry.DateTo);\n            //             daysWorked += (toDate - fromDate) / (1000 * 60 * 60 * 24);\n            //         });\n            //         console.log(\"daysWorked\", daysWorked);\n            //         const pairKey = employees.sort().join('-');\n            //         console.log(\"pairKey\", pairKey);\n            //         employeePairs[pairKey] = (employeePairs[pairKey] || 0) + daysWorked;\n            //         console.log(\"employeePairs\", employeePairs);\n            //     }\n            // }\n            },\n            header: true\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n        type: \"file\",\n        onChange: handleFileUpload\n    }, void 0, false, {\n        fileName: \"/Users/martinashebova/Desktop/marti/-Martina---Shebova--employees/components/uploadCSVFile/uploadCSVfile.jsx\",\n        lineNumber: 210,\n        columnNumber: 12\n    }, this);\n}\n_c = UploadCSVFile;\n/* harmony default export */ __webpack_exports__[\"default\"] = (UploadCSVFile);\nvar _c;\n$RefreshReg$(_c, \"UploadCSVFile\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/uploadCSVFile/uploadCSVfile.jsx\n"));

/***/ })

});